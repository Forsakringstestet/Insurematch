import streamlit as st
import pandas as pd
import re
from io import BytesIO
from docx import Document
from PyPDF2 import PdfReader
from datetime import date, timedelta

# === Funktioner ===

# Funktion f√∂r att konvertera text till nummer (f√∂rs√§kringsbelopp etc.)
def to_number(varde):
    try:
        if varde is None:
            return 0
        if isinstance(varde, (int, float)):
            return int(varde)
        s = str(varde).lower()
        s = s.replace(" ", "").replace("kr", "").replace("sek", "")
        s = s.replace(",", ".")  # hantera t.ex. 1,5m som 1.5m
        if "msek" in s:
            return int(float(s.replace("msek", "")) * 1_000_000)
        elif "m" in s:
            return int(float(s.replace("m", "")) * 1_000_000)
        elif "k" in s:
            return int(float(s.replace("k", "")) * 1_000)
        digits = ''.join(filter(str.isdigit, s))
        return int(digits) if digits else 0
    except Exception as e:
        return 0

# Funktion f√∂r att extrahera belopp fr√•n text (t.ex. PDF)
def extrahera_belopp(text, pattern):
    match = re.search(pattern, text, re.IGNORECASE)
    if match:
        return match.group(1)
    return "0"

# Funktion f√∂r att extrahera f√∂rs√§kringsbolag fr√•n PDF
def extrahera_forsakringsgivare(text):
    match = re.search(r"(if|lf|trygg-hansa|moderna|protector|svedea|folksam|gjensidige|dina|lanf√∂rs√§kringar)", text, re.IGNORECASE)
    if match:
        return match.group(1).capitalize()
    return "Ok√§nt"

# Funktion f√∂r att extrahera villkor fr√•n PDF
def extrahera_villkor_ur_pdf(text):
    return {
        "f√∂rs√§kringsgivare": extrahera_forsakringsgivare(text),
        "egendom": extrahera_belopp(text, r"(egendom|byggnad|fastighet).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "ansvar": extrahera_belopp(text, r"(ansvar|skadest√•nd).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "avbrott": extrahera_belopp(text, r"(avbrott|f√∂rlust av int√§kt|driftstopp).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "sj√§lvrisk": extrahera_belopp(text, r"(sj√§lvrisk|sj√§lvrisken).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "undantag": extrahera_belopp(text, r"(undantag|exkluderat).*?:\s*(.*?)(\n|$)"),
        "premie": extrahera_belopp(text, r"(premie|f√∂rs√§kringsbelopp).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "villkorsreferens": "PDF"
    }

# Funktion f√∂r att l√§sa in PDF-text
def l√§s_pdf_text(pdf_file):
    reader = PdfReader(pdf_file)
    text = ""
    for page in reader.pages:
        page_text = page.extract_text()
        if page_text:
            text += page_text + "\n"
    return text

# Funktion f√∂r att skapa en Word-rapport fr√•n sammanst√§lld data
def generera_word_dokument(data):
    doc = Document()
    doc.add_heading("Upphandlingsunderlag ‚Äì F√∂rs√§kringsj√§mf√∂relse", level=1)
    table = doc.add_table(rows=1, cols=len(data[0]))
    hdr_cells = table.rows[0].cells
    for i, key in enumerate(data[0].keys()):
        hdr_cells[i].text = key
    for row in data:
        cells = table.add_row().cells
        for i, key in enumerate(row):
            cells[i].text = str(row[key])
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

# Funktion f√∂r att j√§mf√∂ra och po√§ngs√§tta villkor
def poangsatt_villkor(lista):
    normaliserade = []
    for rad in lista:
        normaliserade.append({
            "Bolag": rad.get("f√∂rs√§kringsgivare", "Ok√§nt"),
            "Egendom": to_number(rad.get("egendom")),
            "Ansvar": to_number(rad.get("ansvar")),
            "Avbrott": to_number(rad.get("avbrott")),
            "Sj√§lvrisk": to_number(rad.get("sj√§lvrisk")),
            "Premie": to_number(rad.get("premie")),
            "Undantag": rad.get("undantag", "")
        })

    max_t√§ckning = max((f["Egendom"] + f["Ansvar"]) for f in normaliserade) or 1
    max_sj√§lvrisk = max((f["Sj√§lvrisk"] for f in normaliserade)) or 1
    max_premie = max((f["Premie"] for f in normaliserade)) or 1

    resultat = []
    for f in normaliserade:
        po√§ng_t√§ckning = (f["Egendom"] + f["Ansvar"]) / max_t√§ckning
        po√§ng_sj√§lvrisk = 1 - (f["Sj√§lvrisk"] / max_sj√§lvrisk)
        po√§ng_premie = 1 - (f["Premie"] / max_premie)
        totalpo√§ng = round(0.5 * po√§ng_t√§ckning + 0.2 * po√§ng_sj√§lvrisk + 0.3 * po√§ng_premie, 3)
        f["Totalpo√§ng"] = totalpo√§ng
        resultat.append(f)

    return sorted(resultat, key=lambda x: x["Totalpo√§ng"], reverse=True)

# === Streamlit gr√§nssnitt ===

st.set_page_config(page_title="F√∂rs√§kringsguide", page_icon="üõ°Ô∏è", layout="centered")
st.title("üõ°Ô∏è F√∂rs√§kringsguide och J√§mf√∂relse")

menu = st.sidebar.radio("Navigera", ["üîç Automatisk analys", "‚úçÔ∏è Manuell inmatning & rekommendation"])

if menu == "üîç Automatisk analys":
    uploaded_pdfs = st.file_uploader("üìÑ Ladda upp en eller flera PDF:er", type="pdf", accept_multiple_files=True)
    if uploaded_pdfs:
        villkorslista = []
        for i, pdf in enumerate(uploaded_pdfs):
            text = l√§s_pdf_text(pdf)
            st.markdown(f"#### üìÑ Fil {i+1}: {pdf.name}")
            st.text_area(f"Inneh√•ll ur {pdf.name}", value=text[:2000], height=200)

            extrakt = extrahera_villkor_ur_pdf(text)
            villkorslista.append(extrakt)

            st.json(extrakt)
            saknade = [k for k, v in extrakt.items() if to_number(v) == 0 and k != "undantag"]
            if saknade:
                st.warning(f"‚ö†Ô∏è Saknade f√§lt i {pdf.name}: {', '.join(saknade)}")
            st.markdown("---")

        if villkorslista:
            df = pd.DataFrame(poangsatt_villkor(villkorslista))
            st.subheader("üìä J√§mf√∂relse med po√§ngs√§ttning")
            st.dataframe(df)

            st.download_button("‚¨áÔ∏è Ladda ner sammanst√§llning (Word)", data=generera_word_dokument(df.to_dict(orient="records")), file_name="jamforelse_upphandling.docx")
            st.success(f"‚úÖ J√§mf√∂relse klar!")

elif menu == "‚úçÔ∏è Manuell inmatning & rekommendation":
    with st.form("f√∂retagsformul√§r"):
        f√∂retagsnamn = st.text_input("F√∂retagsnamn")
        oms√§ttning = st.number_input("Oms√§ttning (MSEK)", min_value=0.0, step=0.1)
        anst√§llda = st.number_input("Antal anst√§llda", min_value=0, step=1)
        bransch = st.selectbox("Bransch", ["IT", "Tillverkning", "Transport", "Konsult", "Handel", "Bygg", "V√•rd"])
        ort = st.text_input("Stad")
        land = st.text_input("Land", value="Sverige")
        nuvarande_forsakring = st.text_input("Nuvarande f√∂rs√§kringsbolag (valfritt)")

        egendom = st.number_input("Egendomsv√§rde (kr)", step=10000)
        ansvar = st.number_input("Ansvarsskydd (kr)", step=10000)
        avbrott = st.number_input("Avbrottsers√§ttning (kr)", step=10000)
        premie = st.number_input("Premie per √•r (kr)", step=10000)
        
        submitted = st.form_submit_button("Analysera")

    if submitted:
        st.success(f"üéØ Analys f√∂r {f√∂retagsnamn} inom {bransch}!")
        rekommendation = f"F√∂r {bransch} med {anst√§llda} anst√§llda och {oms√§ttning} MSEK i oms√§ttning rekommenderas: \n"

        # L√§gg till rekommendation baserat p√• bransch
        if bransch == "IT":
            rekommendation += "- Cyberf√∂rs√§kring\n- Konsultansvar\n- Egendomsskydd"
        
        st.markdown(f"### üìå Rekommenderat f√∂rs√§kringsuppl√§gg\n{rekommendation}")
        st.download_button("‚¨áÔ∏è Exportera rekommendation", data=generera_word_dokument([{
            "F√∂retag": f√∂retagsnamn,
            "Org.nr": "Ej angivet",
            "Bransch": bransch,
            "Egendom": egendom,
            "Ansvar": ansvar,
            "Avbrott": avbrott,
            "Premie": premie,
            "Ort": ort,
            "Land": land,
            "Rekommendation": rekommendation
        }]), file_name="forsakringsrekommendation.docx")
