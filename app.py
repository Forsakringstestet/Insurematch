import streamlit as st
import pandas as pd
import json
import re
from io import BytesIO
from docx import Document
from PyPDF2 import PdfReader

# --- FUNKTIONER ---
def to_number(varde):
    if varde is None:
        return 0
    s = str(varde).replace(" ", "").replace("kr", "").replace("SEK", "").replace("k", "000").replace("MSEK", "000000")
    return int(''.join(filter(str.isdigit, s)))

def normalisera_data(radata):
    return {
        "bolag": radata.get("f√∂rs√§kringsgivare", "Ok√§nt"),
        "egendom": to_number(radata.get("egendom", 0)),
        "ansvar": to_number(radata.get("ansvar", 0)),
        "avbrott": to_number(radata.get("avbrott", 0)),
        "sj√§lvrisk": to_number(radata.get("sj√§lvrisk", 0)),
        "undantag": [u.strip().lower() for u in radata.get("undantag", "").split(",")],
        "premie": to_number(radata.get("premie", 0)),
        "villkor_id": radata.get("villkorsreferens", "PDF")
    }

def j√§mf√∂r_f√∂rs√§kringar(f√∂rs√§kringar):
    vikt_t√§ckning = 0.5
    vikt_sj√§lvrisk = 0.2
    vikt_premie = 0.3

    max_t√§ckning = max(f["egendom"] + f["ansvar"] for f in f√∂rs√§kringar)
    max_sj√§lvrisk = max(f["sj√§lvrisk"] for f in f√∂rs√§kringar)
    max_premie = max(f["premie"] for f in f√∂rs√§kringar)

    resultat = []

    for f in f√∂rs√§kringar:
        total_t√§ckning = f["egendom"] + f["ansvar"]
        po√§ng_t√§ckning = total_t√§ckning / max_t√§ckning
        po√§ng_sj√§lvrisk = 1 - (f["sj√§lvrisk"] / max_sj√§lvrisk)
        po√§ng_premie = 1 - (f["premie"] / max_premie)

        totalpo√§ng = (
            vikt_t√§ckning * po√§ng_t√§ckning +
            vikt_sj√§lvrisk * po√§ng_sj√§lvrisk +
            vikt_premie * po√§ng_premie
        )

        resultat.append({
            "Bolag": f["bolag"],
            "Totalpo√§ng": round(totalpo√§ng, 3),
            "Undantag": ", ".join(f["undantag"]),
            "Premie": f["premie"],
            "Sj√§lvrisk": f["sj√§lvrisk"],
            "T√§ckning Egendom": f["egendom"],
            "T√§ckning Ansvar": f["ansvar"],
            "Villkor ID": f["villkor_id"]
        })

    return sorted(resultat, key=lambda x: x["Totalpo√§ng"], reverse=True)

def generera_word_dokument(data):
    doc = Document()
    doc.add_heading('Upphandlingsunderlag ‚Äì F√∂rs√§kringsj√§mf√∂relse', level=1)
    doc.add_paragraph('Detta dokument genererades automatiskt via Streamlit-appen. Nedan f√∂ljer en sammanst√§llning av rankade f√∂rs√§kringsf√∂rslag.')

    table = doc.add_table(rows=1, cols=len(data[0]))
    table.style = 'Table Grid'
    hdr_cells = table.rows[0].cells
    for i, key in enumerate(data[0].keys()):
        hdr_cells[i].text = key

    for row in data:
        cells = table.add_row().cells
        for i, key in enumerate(row):
            cells[i].text = str(row[key])

    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

def l√§s_pdf_text(pdf_file):
    pdf_reader = PdfReader(pdf_file)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text() + "\n"
    return text

def extrahera_villkor_ur_pdf(text):
    return {
        "f√∂rs√§kringsgivare": "Ok√§nt",
        "egendom": extrahera_belopp(text, r"egendom.*?(\d+[\s]*[MmKk]?SEK|kr)"),
        "ansvar": extrahera_belopp(text, r"ansvar.*?(\d+[\s]*[MmKk]?SEK|kr)"),
        "avbrott": extrahera_belopp(text, r"avbrott.*?(\d+[\s]*[MmKk]?SEK|kr)"),
        "sj√§lvrisk": extrahera_belopp(text, r"sj√§lvrisk.*?(\d+[\s]*[MmKk]?SEK|kr)"),
        "undantag": extrahera_lista(text, r"undantag.*?:\s*(.*)\n"),
        "premie": extrahera_belopp(text, r"premie.*?(\d+[\s]*[MmKk]?SEK|kr)"),
        "villkorsreferens": "PDF"
    }

def extrahera_belopp(text, pattern):
    match = re.search(pattern, text, re.IGNORECASE)
    return match.group(1) if match else "0"

def extrahera_lista(text, pattern):
    match = re.search(pattern, text, re.IGNORECASE)
    if match:
        return match.group(1)
    return ""

# --- GRENSSNITT ---
st.set_page_config(page_title="F√∂rs√§kringsj√§mf√∂relse", page_icon="üõ°Ô∏è", layout="centered")
st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Insurance_icon.svg/1200px-Insurance_icon.svg.png", width=80)
st.title("üõ°Ô∏è F√∂rs√§kringsj√§mf√∂relse ‚Äì Upphandling")

st.markdown("""
### üìò S√• fungerar det:
1. Ladda upp en JSON-fil fr√•n Insurematch eller klicka p√• testdata
2. Alternativt ‚Äì analysera dina PDF-villkor eller f√∂rs√§kringsbrev
3. Vi j√§mf√∂r villkoren och visar rankat resultat
""")

# --- JSON-delen ---
data = []

if st.button("üìä Visa testdata"):
    exempeldata = [
        {"f√∂rs√§kringsgivare": "TryggHansa", "egendom": "10 MSEK", "ansvar": "20 MSEK", "avbrott": "50 MSEK", "sj√§lvrisk": "50k", "undantag": "Cyber, Krig", "premie": "240000 kr", "villkorsreferens": "PDF123"},
        {"f√∂rs√§kringsgivare": "IF", "egendom": "8 000 000 kr", "ansvar": "25 000 000 kr", "avbrott": "45 000 000", "sj√§lvrisk": "40 000 SEK", "undantag": "Cyber", "premie": "230000", "villkorsreferens": "LINK456"},
        {"f√∂rs√§kringsgivare": "L√§nsf√∂rs√§kringar", "egendom": "9 MSEK", "ansvar": "22 MSEK", "avbrott": "48 MSEK", "sj√§lvrisk": "60k", "undantag": "Cyber, Strejk", "premie": "225000 kr", "villkorsreferens": "DOC789"}
    ]
    data = exempeldata
else:
    uploaded_json = st.file_uploader("üìÅ Ladda upp JSON-fil", type=["json"])
    if uploaded_json:
        try:
            data = json.load(uploaded_json)
        except Exception as e:
            st.error(f"Fel i JSON: {e}")

# --- PDF-delen ---
with st.expander("üìÑ Ladda upp PDF f√∂r analys (villkor eller f√∂rs√§kringsbrev)"):
    uploaded_pdf = st.file_uploader("üìÑ Ladda upp PDF", type="pdf")
    if uploaded_pdf:
        pdf_text = l√§s_pdf_text(uploaded_pdf)
        st.subheader("üìÉ Utdrag ur PDF:")
        st.text_area("PDF-inneh√•ll", value=pdf_text[:3000], height=300)
        villkor = extrahera_villkor_ur_pdf(pdf_text)
        st.markdown("**üìå Automatisk extraktion:**")
        st.json(villkor)
        data.append(villkor)

# --- J√§mf√∂relse & export ---
if data:
    normaliserade = [normalisera_data(f) for f in data]
    rankade = j√§mf√∂r_f√∂rs√§kringar(normaliserade)
    df_resultat = pd.DataFrame(rankade)

    st.success("‚úÖ J√§mf√∂relse klar!")
    st.dataframe(df_resultat)

    st.download_button("‚¨áÔ∏è Ladda ner som CSV", data=df_resultat.to_csv(index=False).encode("utf-8"), file_name="forsakringsjamforelse.csv")
    word_buffer = generera_word_dokument(rankade)
    st.download_button("‚¨áÔ∏è Ladda ner upphandlingsunderlag (Word)", data=word_buffer, file_name="upphandlingsunderlag.docx")
else:
    st.info("Ladda upp JSON eller testa PDF-l√§sning f√∂r analys.")
