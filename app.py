import streamlit as st
import pandas as pd
import re
import json
import pdfplumber
from io import BytesIO
from docx import Document
from PyPDF2 import PdfReader
from datetime import date, timedelta

BASBELOPP_2025 = 58800

def to_number(varde):
    try:
        if varde is None:
            return 0
        if isinstance(varde, (int, float)):
            return int(varde)
        s = str(varde).lower()
        s = s.replace(" ", "").replace("kr", "").replace("sek", "").replace(",", ".")
        if "basbelopp" in s:
            val = float(re.findall(r"(\d+\.?\d*)", s)[0])
            return int(val * BASBELOPP_2025)
        elif "msek" in s:
            return int(float(s.replace("msek", "")) * 1_000_000)
        elif "m" in s:
            return int(float(s.replace("m", "")) * 1_000_000)
        elif "k" in s:
            return int(float(s.replace("k", "")) * 1_000)
        digits = ''.join(filter(lambda x: x.isdigit() or x == '.', s))
        return int(float(digits)) if digits else 0
    except:
        return 0

def l√§s_pdf_text(pdf_file):
    try:
        with pdfplumber.open(pdf_file) as pdf:
            return "\n".join([page.extract_text() or "" for page in pdf.pages])
    except:
        reader = PdfReader(pdf_file)
        return "\n".join([page.extract_text() or "" for page in reader.pages])

def extrahera_premie(text):
    patterns = [
        r"bruttopremie[:\s]*([\d\s]+) ?kr",
        r"nettopremie[:\s]*([\d\s]+) ?kr",
        r"pris per √•r[:\s]*([\d\s]+)",
        r"premie[:\s]*([\d\s]+) ?kr",
        r"total kostnad[:\s]*([\d\s]+)",
        r"pris[:\s]*([\d\s]+)"
    ]
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            try:
                value = match.group(1).replace(" ", "")
                return int(value)
            except:
                continue
    return 0

def extrahera_forsakringsgivare(text):
    match = re.search(r"(if|lf|trygg-hansa|moderna|protector|svedea|folksam|gjensidige|dina|lanf√∂rs√§kringar)", text, re.IGNORECASE)
    return match.group(1).capitalize() if match else "Ok√§nt"

def extrahera_lista(text, pattern):
    match = re.search(pattern, text, re.IGNORECASE)
    if match:
        return match.group(1).strip()
    return ""

def extrahera_villkor_ur_pdf(text):
    def hitta_summa(text, nyckelord, matcha_flera=False):
        m√∂nster = rf"{nyckelord}[^0-9]*([\d\s.,]+)( kr| sek|:-)?"
        belopp = re.findall(m√∂nster, text, re.IGNORECASE)
        summor = [to_number(match[0]) for match in belopp]
        return sum(summor) if (matcha_flera and summor) else (max(summor) if summor else 0)

    def extrahera_datumperiod(text):
        match = re.search(r"(\d{4}-\d{2}-\d{2})\s*(‚Äì|-|till)\s*(\d{4}-\d{2}-\d{2})", text)
        return f"{match.group(1)} ‚Äì {match.group(3)}" if match else ""

    def extrahera_forsakringsnummer(text):
        match = re.search(r"(f√∂rs√§kringsnummer|avtalsnummer)[\s:]*([A-Z0-9\-]+)", text, re.IGNORECASE)
        return match.group(2).strip() if match else ""

    def extrahera_lank(text):
        match = re.search(r"https?://[^\s]+", text)
        return match.group(0) if match else "PDF"

    return {
        "f√∂rs√§kringsgivare": extrahera_forsakringsgivare(text),
        "egendom": hitta_summa(text, r"(egendom|byggnad|fastighet|maskiner|inventarier)", matcha_flera=True),
        "ansvar": hitta_summa(text, r"(ansvar|ansvarsf√∂rs√§kring|produktansvar)", matcha_flera=True),
        "avbrott": hitta_summa(text, r"(avbrott|f√∂rlust av t√§ckningsbidrag|int√§ktsbortfall)", matcha_flera=True),
        "sj√§lvrisk": hitta_summa(text, r"(sj√§lvrisk|sj√§lvrisken)"),
        "undantag": extrahera_lista(text, r"(undantag|exkluderat).*?:\s*(.*?)(\n|$)"),
        "premie": extrahera_premie(text),
        "f√∂rs√§kringstid": extrahera_datumperiod(text),
        "f√∂rs√§kringsnummer": extrahera_forsakringsnummer(text),
        "villkorsreferens": extrahera_lank(text)
    }
def generera_rekommendationer(bransch, data):
    rekommendationer = []
    ansvar = to_number(data.get("ansvar", 0))
    egendom = to_number(data.get("egendom", 0))
    avbrott = to_number(data.get("avbrott", 0))
    premie = to_number(data.get("premie", 0))

    if bransch == "it":
        if ansvar < 5_000_000:
            rekommendationer.append("üîç Ansvarsf√∂rs√§kring b√∂r t√§cka minst 5‚Äì10 Mkr.")
        if egendom < 100_000:
            rekommendationer.append("üñ•Ô∏è Egendom verkar l√•g ‚Äì kontrollera kontorsutrustning.")
        if avbrott == 0:
            rekommendationer.append("üíª Avbrottsskydd saknas ‚Äì kritiskt f√∂r IT-system.")

    elif bransch == "industri":
        if ansvar < 10_000_000:
            rekommendationer.append("üè≠ Ansvarsf√∂rs√§kring b√∂r vara minst 10 Mkr.")
        if egendom < 1_000_000:
            rekommendationer.append("üèóÔ∏è Egendom verkar l√•g ‚Äì maskiner, lokaler?")
        if avbrott < 0.1 * premie:
            rekommendationer.append("üìâ Avbrottsf√∂rs√§kring verkar l√•g i relation till premie.")

    elif bransch == "transport":
        if ansvar < 5_000_000:
            rekommendationer.append("üöõ Ansvar b√∂r vara minst 5 Mkr.")
        if avbrott == 0:
            rekommendationer.append("üì¶ Avbrottsskydd saknas ‚Äì viktigt vid fordonshaveri.")

    elif bransch == "konsult":
        if ansvar < 2_000_000:
            rekommendationer.append("üß† Konsultansvar b√∂r vara minst 2‚Äì5 Mkr.")
        if "r√§ttsskydd" not in data.get("undantag", "").lower():
            rekommendationer.append("‚öñÔ∏è Kontrollera att r√§ttsskydd finns.")

    elif bransch == "bygg":
        if ansvar < 10_000_000:
            rekommendationer.append("üî® ABT04/ABT06 kr√§ver minst 10 Mkr ansvar.")
        if egendom < 500_000:
            rekommendationer.append("üõ†Ô∏è L√•gt skydd ‚Äì maskiner, verktyg?")

    elif bransch == "handel":
        if egendom < 300_000:
            rekommendationer.append("üõí Kontrollera lagerv√§rde och f√∂rs√§kring.")
        if avbrott == 0:
            rekommendationer.append("üö´ Avbrottsskydd verkar saknas ‚Äì risk vid driftstopp.")

    elif bransch == "v√•rd":
        if ansvar < 10_000_000:
            rekommendationer.append("üíâ V√•rdansvar b√∂r vara minst 10 Mkr.")
        if "patient" not in data.get("villkorsreferens", "").lower():
            rekommendationer.append("ü©∫ Patientf√∂rs√§kring saknas eller otydlig.")

    return rekommendationer if rekommendationer else ["‚úÖ F√∂rs√§kringsskyddet verkar tillfredsst√§llande."]

def poangsatt_villkor(villkor_list):
    df = pd.DataFrame(villkor_list)

    df["Premie"] = df["premie"].apply(to_number)
    df["Sj√§lvrisk"] = df["sj√§lvrisk"].apply(to_number)
    df["Egendom"] = df["egendom"].apply(to_number)
    df["Ansvar"] = df["ansvar"].apply(to_number)
    df["Avbrott"] = df["avbrott"].apply(to_number)

    df["Premie_po√§ng"] = 1 / (df["Premie"] + 1)
    df["Sj√§lvrisk_po√§ng"] = 1 / (df["Sj√§lvrisk"] + 1)
    df["Egendom_po√§ng"] = df["Egendom"]
    df["Ansvar_po√§ng"] = df["Ansvar"]
    df["Avbrott_po√§ng"] = df["Avbrott"]

    for col in ["Premie_po√§ng", "Sj√§lvrisk_po√§ng", "Egendom_po√§ng", "Ansvar_po√§ng", "Avbrott_po√§ng"]:
        max_val = df[col].max()
        df[col] = df[col] / max_val * 10 if max_val > 0 else 0

    df["Totalpo√§ng"] = (
        df["Premie_po√§ng"] * 0.20 +
        df["Sj√§lvrisk_po√§ng"] * 0.15 +
        df["Egendom_po√§ng"] * 0.25 +
        df["Ansvar_po√§ng"] * 0.25 +
        df["Avbrott_po√§ng"] * 0.15
    ).round(2)

    df.rename(columns={
        "f√∂rs√§kringsgivare": "F√∂rs√§kringsgivare",
        "undantag": "Undantag",
        "villkorsreferens": "K√§lla",
        "f√∂rs√§kringstid": "F√∂rs√§kringstid",
        "f√∂rs√§kringsnummer": "F√∂rs√§kringsnummer"
    }, inplace=True)

    return df[[
        "F√∂rs√§kringsgivare", "Premie", "Sj√§lvrisk", "Egendom", "Ansvar", "Avbrott", "Undantag",
        "F√∂rs√§kringstid", "F√∂rs√§kringsnummer", "K√§lla", "Totalpo√§ng"
    ]]

def f√§rgschema(value):
    if value >= 8:
        return 'background-color: #b6fcb6'
    elif value >= 6:
        return 'background-color: #f9fcb6'
    elif value >= 4:
        return 'background-color: #fde2b6'
    else:
        return 'background-color: #fcb6b6'

def generera_word_dokument(data):
    doc = Document()
    doc.add_heading("Upphandlingsunderlag ‚Äì F√∂rs√§kringsj√§mf√∂relse", level=1)
    table = doc.add_table(rows=1, cols=len(data[0]))
    hdr_cells = table.rows[0].cells
    for i, key in enumerate(data[0].keys()):
        hdr_cells[i].text = key
    for row in data:
        cells = table.add_row().cells
        for i, key in enumerate(row):
            cells[i].text = str(row[key])
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

def generera_json(data):
    buffer = BytesIO()
    buffer.write(json.dumps(data, indent=2, ensure_ascii=False).encode("utf-8"))
    buffer.seek(0)
    return buffer
# === HUVUDAPP ===
if __name__ == "__main__":
    st.set_page_config(page_title="F√∂rs√§kringsguide", page_icon="üõ°Ô∏è", layout="centered")
    st.title("üõ°Ô∏è F√∂rs√§kringsguide & J√§mf√∂relse")

    uploaded_pdfs = st.file_uploader("üìÇ Ladda upp en eller flera PDF:er", type="pdf", accept_multiple_files=True)
    p√•minnelse_datum = st.date_input("üîî Vill du f√• en p√•minnelse innan f√∂rnyelse?", value=date.today() + timedelta(days=300))

    if uploaded_pdfs:
        vald_bransch = st.selectbox("üè¢ V√§lj bransch", [
            "it", "industri", "transport", "konsult", "handel", "bygg", "v√•rd"
        ], index=0)

        visa_r√•data = st.checkbox("üìä Visa extraherade r√•data (per PDF)")

        villkorslista = []
        st.markdown("### üìÑ Analys per offert:")

        for i, pdf in enumerate(uploaded_pdfs):
            text = l√§s_pdf_text(pdf)
            st.markdown(f"#### üìë Fil {i+1}: {pdf.name}")
            st.text_area("üìÉ Inneh√•ll (f√∂rhandsgranskning)", value=text[:2000], height=200)

            extrakt = extrahera_villkor_ur_pdf(text)
            villkorslista.append(extrakt)

            if visa_r√•data:
                st.json(extrakt)

            rekommendationer = generera_rekommendationer(vald_bransch, extrakt)
            with st.expander("üí° Rekommenderade f√∂rb√§ttringar"):
                for r in rekommendationer:
                    st.markdown(f"- {r}")

            saknade = [k for k, v in extrakt.items() if to_number(v) == 0 and k not in ["undantag", "villkorsreferens"]]
            if saknade:
                st.warning(f"‚ö†Ô∏è Saknade f√§lt i {pdf.name}: {', '.join(saknade)}")

            st.markdown("---")

        if villkorslista:
            df = pd.DataFrame(poangsatt_villkor(villkorslista))
            st.subheader("üìä Sammanst√§llning & po√§ngs√§ttning")
            st.dataframe(df.style.applymap(f√§rgschema, subset=["Totalpo√§ng"]))

            st.markdown("### üìâ Benchmarking")
            st.markdown(f"**Snittpremie:** {df['Premie'].mean():,.0f} kr  |  **Snittsj√§lvrisk:** {df['Sj√§lvrisk'].mean():,.0f} kr  |  **Snittpo√§ng:** {df['Totalpo√§ng'].mean():.2f}")

            st.download_button(
                "‚¨áÔ∏è Ladda ner sammanst√§llning (Word)",
                data=generera_word_dokument(df.to_dict(orient="records")),
                file_name="jamforelse_upphandling.docx"
            )

            st.download_button(
                "üíæ Exportera som JSON",
                data=generera_json(villkorslista),
                file_name="jamforelse_upphandling.json"
            )

            st.success(f"üîî P√•minnelse noterat: spara detta datum ({p√•minnelse_datum}) i din kalender")
