import streamlit as st
import pandas as pd
import re
from io import BytesIO
from docx import Document
from PyPDF2 import PdfReader
from datetime import date, timedelta

# === KONSTANTER ===
BASBELOPP_2025 = 58800

# === UTILS ===
def to_number(varde):
    try:
        if varde is None:
            return 0
        if isinstance(varde, (int, float)):
            return int(varde)
        s = str(varde).lower()
        s = s.replace(" ", "").replace("kr", "").replace("sek", "").replace(",", ".")
        if "basbelopp" in s:
            val = float(re.findall(r"(\d+\.?\d*)", s)[0])
            return int(val * BASBELOPP_2025)
        elif "msek" in s:
            return int(float(s.replace("msek", "")) * 1_000_000)
        elif "m" in s:
            return int(float(s.replace("m", "")) * 1_000_000)
        elif "k" in s:
            return int(float(s.replace("k", "")) * 1_000)
        digits = ''.join(filter(lambda x: x.isdigit() or x == '.', s))
        return int(float(digits)) if digits else 0
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Fel vid konvertering till nummer: {varde} ({type(varde).__name__}) ‚Üí {e}")
        return 0

def extrahera_belopp_flex(text, keyword):
    pattern = rf"{keyword}[^0-9]*([\d\s.,]+(?:kr|sek|k|m|basbelopp)?)"
    matches = re.findall(pattern, text, re.IGNORECASE)
    numbers = [to_number(m) for m in matches]
    return max(numbers) if numbers else 0

def extrahera_lista(text, pattern):
    match = re.search(pattern, text, re.IGNORECASE)
    if match:
        return match.group(1).strip()
    return ""

def extrahera_forsakringsgivare(text):
    match = re.search(r"(if|lf|trygg-hansa|moderna|protector|svedea|folksam|gjensidige|dina|lanf√∂rs√§kringar)", text, re.IGNORECASE)
    return match.group(1).capitalize() if match else "Ok√§nt"

def l√§s_pdf_text(pdf_file):
    reader = PdfReader(pdf_file)
    text = ""
    for page in reader.pages:
        content = page.extract_text()
        if content:
            text += content + "\n"
    return text
# === EXTRAHERA PDF-VILLKOR ===
def extrahera_villkor_ur_pdf(text):
    return {
        "f√∂rs√§kringsgivare": extrahera_forsakringsgivare(text),
        "egendom": extrahera_belopp_flex(text, "maskiner|inventarier|byggnad|fastighet|egendom"),
        "ansvar": extrahera_belopp_flex(text, "ansvar|ansvarsf√∂rs√§kring|produktansvar"),
        "avbrott": extrahera_belopp_flex(text, "avbrott|f√∂rlust av t√§ckningsbidrag|oms√§ttning"),
        "sj√§lvrisk": extrahera_belopp_flex(text, "sj√§lvrisk"),
        "undantag": extrahera_lista(text, r"(undantag|exkluderat).*?:\s*(.*?)(\n|$)"),
        "premie": extrahera_belopp_flex(text, r"premie|bruttopremie|nettopremie|kostnad|pris|attbetala|totalpremie|summa"),
        "villkorsreferens": "PDF"
    }

# === REKOMMENDATIONSGENERATOR ===
def generera_rekommendationer(bransch, data):
    rekommendationer = []

    ansvar = to_number(data.get("ansvar", 0))
    egendom = to_number(data.get("egendom", 0))
    avbrott = to_number(data.get("avbrott", 0))
    premie = to_number(data.get("premie", 0))

    if bransch == "it":
        if ansvar < 5_000_000:
            rekommendationer.append("üîç Ansvarsf√∂rs√§kring b√∂r t√§cka minst 5‚Äì10 Mkr f√∂r IT-fel ‚Äì √∂verv√§g h√∂jning.")
        if "cyber" not in data.get("undantag", "").lower() and "cyber" not in data.get("villkorsreferens", "").lower():
            rekommendationer.append("üíª Ingen cyberf√∂rs√§kring hittades ‚Äì viktigt skydd vid dataintr√•ng och driftstopp.")
        if egendom < 100_000:
            rekommendationer.append("üñ•Ô∏è Egendomsf√∂rs√§kring (ex. datorer, servrar) verkar l√•g ‚Äì kontrollera v√§rdet.")

    elif bransch == "industri":
        if ansvar < 10_000_000:
            rekommendationer.append("üõ†Ô∏è Produkt-/ansvarsf√∂rs√§kring b√∂r vara minst 10 Mkr ‚Äì justera vid export/h√∂grisk.")
        if egendom < 500_000:
            rekommendationer.append("üè≠ Egendom (maskiner, byggnad) verkar l√•g ‚Äì risk f√∂r underf√∂rs√§kring.")
        if avbrott < 0.1 * premie:
            rekommendationer.append("üìâ Avbrottsf√∂rs√§kring b√∂r t√§cka 10‚Äì30% av √•rsoms√§ttning ‚Äì verkar saknas eller l√•g.")

    elif bransch == "transport":
        if ansvar < 5_000_000:
            rekommendationer.append("üöö Ansvarsf√∂rs√§kring f√∂r lastning/lager b√∂r vara minst 5 Mkr.")
        if avbrott == 0:
            rekommendationer.append("üì¶ Ingen avbrottsf√∂rs√§kring funnen ‚Äì viktigt vid fordons- eller logistikstopp.")

    elif bransch == "konsult":
        if ansvar < 2_000_000:
            rekommendationer.append("üìä Ansvarsf√∂rs√§kring (f√∂rm√∂genhetsskada) b√∂r vara minst 2‚Äì5 Mkr ‚Äì saknas/l√•g?")
        if "r√§ttsskydd" not in data.get("undantag", "").lower():
            rekommendationer.append("‚öñÔ∏è Kontrollera att r√§ttsskydd ing√•r ‚Äì viktigt vid kundtvister.")

    elif bransch == "bygg":
        if ansvar < 10_000_000:
            rekommendationer.append("üèóÔ∏è AB04/ABT06 kr√§ver ansvar minst 10 Mkr ‚Äì h√∂j beloppet.")
        if "entreprenad" not in data.get("villkorsreferens", "").lower():
            rekommendationer.append("üß± Saknar entreprenadf√∂rs√§kring (allrisk) ‚Äì kr√§vs f√∂r byggprojekt.")

    elif bransch == "handel":
        if egendom < 300_000:
            rekommendationer.append("üè¨ L√•gt egendomsskydd ‚Äì kontrollera lagerv√§rde och inventarier.")
        if avbrott == 0:
            rekommendationer.append("üö´ Avbrottsf√∂rs√§kring saknas ‚Äì kritiskt vid driftstopp.")

    elif bransch == "v√•rd":
        if ansvar < 10_000_000:
            rekommendationer.append("üíâ V√•rdansvar b√∂r t√§cka minst 10 Mkr ut√∂ver patientf√∂rs√§kring.")
        if "patient" not in data.get("villkorsreferens", "").lower():
            rekommendationer.append("ü©∫ Ingen patientf√∂rs√§kring hittad ‚Äì lagkrav enligt patientskadelagen.")

    if not rekommendationer:
        return ["‚úÖ F√∂rs√§kringsskyddet verkar tillfredsst√§llande utifr√•n den angivna branschen."]
    return rekommendationer
# === PO√ÑNGS√ÑTTNING ===
def poangsatt_villkor(villkor_list):
    df = pd.DataFrame(villkor_list)

    df["Premie"] = df["premie"]
    df["Sj√§lvrisk"] = df["sj√§lvrisk"]
    df["Egendom"] = df["egendom"]
    df["Ansvar"] = df["ansvar"]
    df["Avbrott"] = df["avbrott"]

    df["Premie_po√§ng"] = 1 / (df["Premie"] + 1)
    df["Sj√§lvrisk_po√§ng"] = 1 / (df["Sj√§lvrisk"] + 1)
    df["Egendom_po√§ng"] = df["Egendom"]
    df["Ansvar_po√§ng"] = df["Ansvar"]
    df["Avbrott_po√§ng"] = df["Avbrott"]

    for col in ["Premie_po√§ng", "Sj√§lvrisk_po√§ng", "Egendom_po√§ng", "Ansvar_po√§ng", "Avbrott_po√§ng"]:
        max_val = df[col].max()
        df[col] = df[col] / max_val * 10 if max_val > 0 else 0

    df["Totalpo√§ng"] = (
        df["Premie_po√§ng"] * 0.2 +
        df["Sj√§lvrisk_po√§ng"] * 0.2 +
        df["Egendom_po√§ng"] * 0.2 +
        df["Ansvar_po√§ng"] * 0.2 +
        df["Avbrott_po√§ng"] * 0.2
    ).round(2)

    df.rename(columns={
        "f√∂rs√§kringsgivare": "F√∂rs√§kringsgivare",
        "undantag": "Undantag",
        "villkorsreferens": "K√§lla"
    }, inplace=True)

    return df[[
        "F√∂rs√§kringsgivare", "Premie", "Sj√§lvrisk", "Egendom", "Ansvar", "Avbrott", "Undantag", "K√§lla", "Totalpo√§ng"
    ]]

# === F√ÑRGSYSTEM F√ñR PO√ÑNG ===
def f√§rgschema(value):
    if value >= 8:
        return 'background-color: #b6fcb6'
    elif value >= 6:
        return 'background-color: #f9fcb6'
    elif value >= 4:
        return 'background-color: #fde2b6'
    else:
        return 'background-color: #fcb6b6'

# === WORD-EXPORT ===
def generera_word_dokument(data):
    doc = Document()
    doc.add_heading("Upphandlingsunderlag ‚Äì F√∂rs√§kringsj√§mf√∂relse", level=1)
    table = doc.add_table(rows=1, cols=len(data[0]))
    hdr_cells = table.rows[0].cells
    for i, key in enumerate(data[0].keys()):
        hdr_cells[i].text = key
    for row in data:
        cells = table.add_row().cells
        for i, key in enumerate(row):
            cells[i].text = str(row[key])
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer
# === HUVUDAPP ===
if __name__ == "__main__":
    st.set_page_config(page_title="F√∂rs√§kringsguide", page_icon="üõ°Ô∏è", layout="centered")
    st.title("üõ°Ô∏è F√∂rs√§kringsguide och J√§mf√∂relse")

    uploaded_pdfs = st.file_uploader("Ladda upp en eller flera PDF:er", type="pdf", accept_multiple_files=True)
    p√•minnelse_datum = st.date_input("üîî Vill du f√• en p√•minnelse innan f√∂rnyelse?", value=date.today() + timedelta(days=300))

    if uploaded_pdfs:
        vald_bransch = st.selectbox("üìÇ V√§lj bransch f√∂r rekommendationer", [
            "it", "industri", "transport", "konsult", "handel", "bygg", "v√•rd"
        ], index=0)

        villkorslista = []
        st.markdown("### üìÇ Tidigare j√§mf√∂relser:")

        for i, pdf in enumerate(uploaded_pdfs):
            text = l√§s_pdf_text(pdf)
            st.markdown(f"#### üìÑ Fil {i+1}: {pdf.name}")
            st.text_area(f"Inneh√•ll ur {pdf.name}", value=text[:2000], height=200)

            extrakt = extrahera_villkor_ur_pdf(text)
            villkorslista.append(extrakt)

            st.json(extrakt)

            rekommendationer = generera_rekommendationer(vald_bransch, extrakt)
            with st.expander("üí° Rekommenderade f√∂rb√§ttringar"):
                for r in rekommendationer:
                    st.markdown(f"- {r}")

            saknade = [k for k, v in extrakt.items() if to_number(v) == 0 and k != "undantag"]
            if saknade:
                st.warning(f"‚ö†Ô∏è Saknade f√§lt i {pdf.name}: {', '.join(saknade)}")
            st.markdown("---")

        if villkorslista:
            df = pd.DataFrame(poangsatt_villkor(villkorslista))
            st.subheader("üìä J√§mf√∂relse med po√§ngs√§ttning")
            st.dataframe(df.style.applymap(f√§rgschema, subset=["Totalpo√§ng"]))

            st.markdown("### üìâ Benchmarking")
            st.markdown(f"**Snittpremie:** {df['Premie'].mean():,.0f} kr  |  **Snittsj√§lvrisk:** {df['Sj√§lvrisk'].mean():,.0f} kr  |  **Snittpo√§ng:** {df['Totalpo√§ng'].mean():.2f}")

            st.download_button(
                "‚¨áÔ∏è Ladda ner sammanst√§llning (Word)",
                data=generera_word_dokument(df.to_dict(orient="records")),
                file_name="jamforelse_upphandling.docx"
            )

            st.success(f"üîî P√•minnelse noterat: spara detta datum ({p√•minnelse_datum}) i din kalender")
