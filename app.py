import streamlit as st
import pandas as pd
import json
from io import BytesIO
from docx import Document

# --- FUNKTIONER ---
def to_number(varde):
    if varde is None:
        return 0
    s = str(varde).replace(" ", "").replace("kr", "").replace("SEK", "").replace("k", "000").replace("MSEK", "000000")
    return int(''.join(filter(str.isdigit, s)))

def normalisera_data(radata):
    return {
        "bolag": radata.get("f√∂rs√§kringsgivare"),
        "egendom": to_number(radata.get("egendom", 0)),
        "ansvar": to_number(radata.get("ansvar", 0)),
        "avbrott": to_number(radata.get("avbrott", 0)),
        "sj√§lvrisk": to_number(radata.get("sj√§lvrisk", 0)),
        "undantag": [u.strip().lower() for u in radata.get("undantag", "").split(",")],
        "premie": to_number(radata.get("premie", 0)),
        "villkor_id": radata.get("villkorsreferens")
    }

def j√§mf√∂r_f√∂rs√§kringar(f√∂rs√§kringar):
    vikt_t√§ckning = 0.5
    vikt_sj√§lvrisk = 0.2
    vikt_premie = 0.3

    max_t√§ckning = max(f["egendom"] + f["ansvar"] for f in f√∂rs√§kringar)
    max_sj√§lvrisk = max(f["sj√§lvrisk"] for f in f√∂rs√§kringar)
    max_premie = max(f["premie"] for f in f√∂rs√§kringar)

    resultat = []

    for f in f√∂rs√§kringar:
        total_t√§ckning = f["egendom"] + f["ansvar"]
        po√§ng_t√§ckning = total_t√§ckning / max_t√§ckning
        po√§ng_sj√§lvrisk = 1 - (f["sj√§lvrisk"] / max_sj√§lvrisk)
        po√§ng_premie = 1 - (f["premie"] / max_premie)

        totalpo√§ng = (
            vikt_t√§ckning * po√§ng_t√§ckning +
            vikt_sj√§lvrisk * po√§ng_sj√§lvrisk +
            vikt_premie * po√§ng_premie
        )

        resultat.append({
            "Bolag": f["bolag"],
            "Totalpo√§ng": round(totalpo√§ng, 3),
            "Undantag": ", ".join(f["undantag"]),
            "Premie": f["premie"],
            "Sj√§lvrisk": f["sj√§lvrisk"],
            "T√§ckning Egendom": f["egendom"],
            "T√§ckning Ansvar": f["ansvar"],
            "Villkor ID": f["villkor_id"]
        })

    return sorted(resultat, key=lambda x: x["Totalpo√§ng"], reverse=True)

def generera_word_dokument(data):
    doc = Document()
    doc.add_heading('Upphandlingsunderlag ‚Äì F√∂rs√§kringsj√§mf√∂relse', level=1)
    doc.add_paragraph('Detta dokument genererades automatiskt via Streamlit-appen. Nedan f√∂ljer en sammanst√§llning av rankade f√∂rs√§kringsf√∂rslag.')
    
    table = doc.add_table(rows=1, cols=len(data[0]))
    table.style = 'Table Grid'
    hdr_cells = table.rows[0].cells
    for i, key in enumerate(data[0].keys()):
        hdr_cells[i].text = key

    for row in data:
        cells = table.add_row().cells
        for i, key in enumerate(row):
            cells[i].text = str(row[key])

    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

# --- GRENSSNITT ---
st.set_page_config(page_title="F√∂rs√§kringsj√§mf√∂relse", page_icon="üìä", layout="centered")
st.title("üìä F√∂rs√§kringsj√§mf√∂relse ‚Äì Upphandling")

st.markdown("""
### üìò S√• fungerar det:
1. Ladda upp en JSON-fil fr√•n Insurematch (eller klicka f√∂r att visa testdata)
2. Vi j√§mf√∂r f√∂rs√§kringar baserat p√• t√§ckning, sj√§lvrisk och premie
3. Du f√•r en rangordnad lista och kan exportera till CSV eller Word
""")

# Exempeldata-knapp
if st.button("Visa testdata utan att ladda upp"):
    exempeldata = [
        {"f√∂rs√§kringsgivare": "TryggHansa", "egendom": "10 MSEK", "ansvar": "20 MSEK", "avbrott": "50 MSEK", "sj√§lvrisk": "50k", "undantag": "Cyber, Krig", "premie": "240000 kr", "villkorsreferens": "PDF123"},
        {"f√∂rs√§kringsgivare": "IF", "egendom": "8 000 000 kr", "ansvar": "25 000 000 kr", "avbrott": "45 000 000", "sj√§lvrisk": "40 000 SEK", "undantag": "Cyber", "premie": "230000", "villkorsreferens": "LINK456"},
        {"f√∂rs√§kringsgivare": "L√§nsf√∂rs√§kringar", "egendom": "9 MSEK", "ansvar": "22 MSEK", "avbrott": "48 MSEK", "sj√§lvrisk": "60k", "undantag": "Cyber, Strejk", "premie": "225000 kr", "villkorsreferens": "DOC789"}
    ]
    data = exempeldata
else:
    uploaded_file = st.file_uploader("üìÅ Ladda upp JSON-fil med f√∂rs√§kringsdata", type=["json"])
    if uploaded_file is not None:
        try:
            data = json.load(uploaded_file)
        except Exception as e:
            st.error(f"Fel vid uppladdning: {e}")
            data = None
    else:
        data = None

if data:
    normaliserade = [normalisera_data(f) for f in data]
    rankade = j√§mf√∂r_f√∂rs√§kringar(normaliserade)
    df_resultat = pd.DataFrame(rankade)

    st.success("‚úÖ J√§mf√∂relse klar!")
    st.dataframe(df_resultat)

    st.download_button("‚¨áÔ∏è Ladda ner som CSV", data=df_resultat.to_csv(index=False).encode("utf-8"), file_name="forsakringsjamforelse.csv")
    word_buffer = generera_word_dokument(rankade)
    st.download_button("‚¨áÔ∏è Ladda ner upphandlingsunderlag (Word)", data=word_buffer, file_name="upphandlingsunderlag.docx")
else:
    st.info("V√§nligen ladda upp en JSON-fil eller klicka p√• testdata-knappen.")
