import streamlit as st
import pandas as pd
import json
import re
from io import BytesIO
from docx import Document
from PyPDF2 import PdfReader
from datetime import date, timedelta

# === Funktioner ===

def to_number(varde):
    try:
        if varde is None:
            return 0
        if isinstance(varde, (int, float)):
            return int(varde)
        s = str(varde).lower()
        s = s.replace(" ", "").replace("kr", "").replace("sek", "")
        s = s.replace(",", ".")  # Hantera t.ex. 1,5m som 1.5m

        # Hantera miljoner och tusental (MSEK, m, k)
        if "msek" in s:
            return int(float(s.replace("msek", "")) * 1_000_000)
        elif "m" in s:
            return int(float(s.replace("m", "")) * 1_000_000)
        elif "k" in s:
            return int(float(s.replace("k", "")) * 1_000)

        digits = ''.join(filter(str.isdigit, s))
        return int(digits) if digits else 0
    except Exception as e:
        return 0

def extrahera_belopp(text, pattern):
    match = re.search(pattern, text, re.IGNORECASE)
    if match:
        return match.group(1)
    return "0"

def extrahera_lista(text, pattern):
    match = re.search(pattern, text, re.IGNORECASE)
    if match:
        return match.group(1)
    return ""

def extrahera_forsakringsgivare(text):
    match = re.search(r"(if|lf|trygg-hansa|moderna|protector|svedea|folksam|gjensidige|dina|lanf√∂rs√§kringar)", text, re.IGNORECASE)
    if match:
        return match.group(1).capitalize()
    return "Ok√§nt"

def extrahera_villkor_ur_pdf(text):
    return {
        "f√∂rs√§kringsgivare": extrahera_forsakringsgivare(text),
        "egendom": extrahera_belopp(text, r"(egendom|byggnad|fastighet).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "ansvar": extrahera_belopp(text, r"(ansvar|skadest√•nd).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "avbrott": extrahera_belopp(text, r"(avbrott|f√∂rlust av int√§kt|driftstopp).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "sj√§lvrisk": extrahera_belopp(text, r"(sj√§lvrisk|sj√§lvrisken).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "undantag": extrahera_lista(text, r"(undantag|exkluderat).*?:\s*(.*?)(\n|$)"),
        "premie": extrahera_belopp(text, r"(premie|f√∂rs√§kringsbelopp).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "villkorsreferens": "PDF"
    }

def formattera_pdf_text(text):
    text = re.sub(r"(?<=\w)\n(?=\w)", " ", text)  # Ta bort h√•rda radbrytningar mitt i meningar
    stycken = re.split(r"\n{2,}|(?=\n[A-Z√Ñ√ñ√Ö])", text)  # Dela i stycken baserat p√• dubbla radbrytningar eller rubriker
    highlight_nyckelord = [
        (r"(?i)(sj√§lvrisk)", "üü° \\1"),
        (r"(?i)(egendom)", "üü¢ \\1"),
        (r"(?i)(ansvar)", "üü£ \\1"),
        (r"(?i)(avbrott)", "üîµ \\1"),
        (r"(?i)(undantag)", "üî¥ \\1"),
        (r"(?i)(premie)", "üü† \\1")
    ]
    formatterad = "\n\n".join([stycke.strip() for stycke in stycken if stycke.strip()])
    for pattern, emoji in highlight_nyckelord:
        formatterad = re.sub(pattern, emoji, formatterad)
    return formatterad

# === Visning i gr√§nssnitt ===

if __name__ == "__main__":
    st.set_page_config(page_title="F√∂rs√§kringsguide", layout="centered")
    st.title("üõ°Ô∏è F√∂rs√§kringsguide och J√§mf√∂relse")

    menu = st.sidebar.radio("Navigera", ["üîç Automatisk analys", "‚úçÔ∏è Manuell inmatning & rekommendation"])

    if menu == "üîç Automatisk analys":
        uploaded_pdfs = st.file_uploader("üìÑ Ladda upp en eller flera PDF:er", type="pdf", accept_multiple_files=True)
        p√•minnelse_datum = st.date_input("üîî Vill du f√• en p√•minnelse innan f√∂rnyelse?", value=date.today() + timedelta(days=300), key="reminder_date")

        if uploaded_pdfs:
            villkorslista = []
            for i, uploaded_pdf in enumerate(uploaded_pdfs):
                reader = PdfReader(uploaded_pdf)
                full_text = ""
                for page in reader.pages:
                    page_text = page.extract_text()
                    if page_text:
                        full_text += page_text + "\n"

                st.subheader(f"üîé PDF {i+1}: {uploaded_pdf.name}")
                st.text_area("üìÑ PDF-inneh√•ll (formaterat)", value=formattera_pdf_text(full_text)[:3000], height=300)

                st.subheader("üìã Extraherade v√§rden")
                resultat = extrahera_villkor_ur_pdf(full_text)
                st.json(resultat)

                villkorslista.append(resultat)

            # J√§mf√∂relse med po√§ngs√§ttning
            if villkorslista:
                df = pd.DataFrame(poangsatt_villkor(villkorslista))
                st.dataframe(df.style.background_gradient(subset=["Totalpo√§ng"], cmap="RdYlGn"))

                st.subheader("üìâ Benchmarking")
                st.markdown(f"**Snittpremie:** {df['Premie'].mean():,.0f} kr  |  **Snittsj√§lvrisk:** {df['Sj√§lvrisk'].mean():,.0f} kr  |  **Snittpo√§ng:** {df['Totalpo√§ng'].mean():.2f}")

                st.download_button("‚¨áÔ∏è Ladda ner sammanst√§llning (Word)", data=generera_word_dokument(df.to_dict(orient="records")), file_name="jamforelse_upphandling.docx")

                st.success(f"üîî P√•minnelse noterat: spara detta datum ({p√•minnelse_datum}) i din kalender")

        else:
            st.markdown("*Inga sparade √§nnu.*")

    elif menu == "‚úçÔ∏è Manuell inmatning & rekommendation":
        with st.form("f√∂retagsformul√§r"):
            st.subheader("üè¢ F√∂retagsinformation")
            f√∂retagsnamn = st.text_input("F√∂retagsnamn")
            orgnr = st.text_input("Organisationsnummer")
            oms√§ttning = st.number_input("Oms√§ttning (MSEK)", min_value=0.0, step=0.1)
            anst√§llda = st.number_input("Antal anst√§llda", min_value=0, step=1)
            bransch = st.selectbox("Bransch", ["IT", "Tillverkning", "Transport", "Konsult", "Handel", "Bygg", "V√•rd"])
            ort = st.text_input("Stad")
            land = st.text_input("Land", value="Sverige")
            nuvarande = st.text_input("Nuvarande f√∂rs√§kringsbolag (valfritt)")

            st.subheader("üõ°Ô∏è F√∂rs√§kringsmoment")
            egendom = st.number_input("Egendomsv√§rde (kr)", step=10000)
            ansvar = st.number_input("Ansvarsskydd (kr)", step=10000)
            avbrott = st.number_input("Avbrottsers√§ttning (kr)", step=10000)
            premie = st.number_input("Premie per √•r (kr)", step=10000)
            submitted = st.form_submit_button("Analysera")

        if submitted:
            st.success(f"üéØ Tack {f√∂retagsnamn}, analys f√∂r bransch: {bransch}")
            rekommendation = f"üîé F√∂r ett f√∂retag inom {bransch.lower()} med {anst√§llda} anst√§llda och {oms√§ttning} MSEK i oms√§ttning rekommenderas vanligtvis f√∂ljande f√∂rs√§kringsmoment:\n"

            # L√§gg till specifika rekommendationer baserat p√• bransch
            if bransch == "IT":
                rekommendation += "- Cyberf√∂rs√§kring (5‚Äì15% av oms√§ttningen)\n- Konsultansvar (2‚Äì10 MSEK)\n- Egendomsskydd f√∂r IT-utrustning"
            elif bransch == "Tillverkning":
                rekommendation += "- Egendomsf√∂rs√§kring f√∂r maskiner/lager\n- Produktansvar (minst 10 MSEK)\n- Avbrottsf√∂rs√§kring (upp till 12 m√•naders t√§ckning)"
            elif bransch == "Transport":
                rekommendation += "- Transport√∂ransvar & varuf√∂rs√§kring\n- Trafik/vagnskada p√• fordon\n- Avbrott & ansvar utanf√∂r CMR"
            elif bransch == "Konsult":
                rekommendation += "- Konsultansvar (minst 2‚Äì5 MSEK)\n- R√§ttsskydd\n- Cyber om kunddata hanteras"
            elif bransch == "Handel":
                rekommendation += "- Lager/inventarief√∂rs√§kring\n- Produktansvar (s√§ljled)\n- Avbrott & transport"
            elif bransch == "Bygg":
                rekommendation += "- Entreprenad/allrisk\n- ROT-ansvar\n- Egendom/maskiner + ansvarsf√∂rs√§kring"
            elif bransch == "V√•rd":
                rekommendation += "- Patientf√∂rs√§kring (lagkrav)\n- Avbrott & egendom\n- Ansvar ut√∂ver patientskadelagen"

            st.markdown(f"""
            #### üìå Rekommenderat f√∂rs√§kringsuppl√§gg
            {rekommendation}
            """)

            st.download_button("‚¨áÔ∏è Exportera f√∂rslag (Word)", data=generera_word_dokument([{
                "F√∂retag": f√∂retagsnamn,
                "Org.nr": orgnr,
                "Bransch": bransch,
                "Egendom": egendom,
                "Ansvar": ansvar,
                "Avbrott": avbrott,
                "Premie": premie,
                "Ort": ort,
                "Land": land,
                "Rekommendation": rekommendation
            }]), file_name="forsakringsrekommendation.docx")
