import streamlit as st
import pandas as pd
import json
import re
from io import BytesIO
from docx import Document
from PyPDF2 import PdfReader
from datetime import date, timedelta

# === Funktioner ===

# F√∂r att omvandla str√§ngar till numeriska v√§rden f√∂r ber√§kningar.
def to_number(varde):
    try:
        if varde is None:
            return 0
        if isinstance(varde, (int, float)):
            return int(varde)
        s = str(varde).lower()
        s = s.replace(" ", "").replace("kr", "").replace("sek", "").replace(",", ".")
        if "msek" in s:
            return int(float(s.replace("msek", "")) * 1_000_000)
        elif "m" in s:
            return int(float(s.replace("m", "")) * 1_000_000)
        elif "k" in s:
            return int(float(s.replace("k", "")) * 1_000)
        digits = ''.join(filter(str.isdigit, s))
        return int(digits) if digits else 0
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Fel vid konvertering till nummer: {varde} ({type(varde).__name__}) ‚Üí {e}")
        return 0

# Extrahera specifika belopp fr√•n texten.
def extrahera_belopp(text, pattern):
    match = re.search(pattern, text, re.IGNORECASE)
    if match:
        return match.group(1)
    return "0"

# Extrahera listor (t.ex. undantag) fr√•n texten.
def extrahera_lista(text, pattern):
    match = re.search(pattern, text, re.IGNORECASE)
    if match:
        return match.group(1)
    return ""

# Extrahera f√∂rs√§kringsgivare fr√•n texten
def extrahera_forsakringsgivare(text):
    match = re.search(r"(if|lf|trygg-hansa|moderna|protector|svedea|folksam|gjensidige|dina|lanf√∂rs√§kringar)", text, re.IGNORECASE)
    if match:
        return match.group(1).capitalize()
    return "Ok√§nt"

# Funktion f√∂r att extrahera alla villkor fr√•n en PDF-fil
def extrahera_villkor_ur_pdf(text):
    return {
        "f√∂rs√§kringsgivare": extrahera_forsakringsgivare(text),
        "egendom": extrahera_belopp(text, r"(egendom|byggnad|fastighet).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "ansvar": extrahera_belopp(text, r"(ansvar|skadest√•nd).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "avbrott": extrahera_belopp(text, r"(avbrott|f√∂rlust av int√§kt|driftstopp).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "sj√§lvrisk": extrahera_belopp(text, r"(sj√§lvrisk|sj√§lvrisken).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "undantag": extrahera_lista(text, r"(undantag|exkluderat).*?:\s*(.*?)(\n|$)"),
        "premie": extrahera_belopp(text, r"(premie|f√∂rs√§kringsbelopp).*?(\d+[\s]*[MmKkMmSEKsek,\.]*[\s]*SEK|kr)"),
        "villkorsreferens": "PDF"
    }

# F√∂r att l√§sa PDF-text
def l√§s_pdf_text(pdf_file):
    reader = PdfReader(pdf_file)
    text = ""
    for page in reader.pages:
        page_text = page.extract_text()
        if page_text:
            text += page_text + "\n"
    return text

# === Visning i gr√§nssnitt ===

if __name__ == "__main__":
    st.set_page_config(page_title="F√∂rs√§kringsguide", page_icon="üõ°Ô∏è", layout="centered")
    st.title("üõ°Ô∏è F√∂rs√§kringsguide och J√§mf√∂relse")

    # Filuppladdning
    uploaded_pdfs = st.file_uploader("Ladda upp en eller flera PDF:er", key="upload_pdfs", type="pdf", accept_multiple_files=True)
    p√•minnelse_datum = st.date_input("üîî Vill du f√• en p√•minnelse innan f√∂rnyelse?", value=date.today() + timedelta(days=300), key="reminder_date")

    if uploaded_pdfs:
        villkorslista = []
        st.markdown("### üìÇ Tidigare j√§mf√∂relser:")

        # Extrahera information fr√•n varje PDF
        for i, pdf in enumerate(uploaded_pdfs):
            text = l√§s_pdf_text(pdf)
            st.markdown(f"#### üìÑ Fil {i+1}: {pdf.name}")
            st.text_area(f"Inneh√•ll ur {pdf.name}", value=text[:2000], height=200)

            extrakt = extrahera_villkor_ur_pdf(text)
            villkorslista.append(extrakt)

            st.json(extrakt)
            saknade = [k for k, v in extrakt.items() if to_number(v) == 0 and k != "undantag"]
            if saknade:
                st.warning(f"‚ö†Ô∏è Saknade f√§lt i {pdf.name}: {', '.join(saknade)}")
            st.markdown("---")

        if villkorslista:
            df = pd.DataFrame(poangsatt_villkor(villkorslista))
            st.subheader("üìä J√§mf√∂relse med po√§ngs√§ttning")
            st.dataframe(df.style.applymap(f√§rgschema, subset=["Totalpo√§ng"]))
            
            st.markdown("### üìâ Benchmarking")
            st.markdown(f"**Snittpremie:** {df['Premie'].mean():,.0f} kr  |  **Snittsj√§lvrisk:** {df['Sj√§lvrisk'].mean():,.0f} kr  |  **Snittpo√§ng:** {df['Totalpo√§ng'].mean():.2f}")
            st.download_button("‚¨áÔ∏è Ladda ner sammanst√§llning (Word)", data=generera_word_dokument(df.to_dict(orient="records")), file_name="jamforelse_upphandling.docx")

            st.success(f"üîî P√•minnelse noterat: spara detta datum ({p√•minnelse_datum}) i din kalender")

# Exportfunktion f√∂r Word-dokument
def generera_word_dokument(data):
    doc = Document()
    doc.add_heading("Upphandlingsunderlag ‚Äì F√∂rs√§kringsj√§mf√∂relse", level=1)
    table = doc.add_table(rows=1, cols=len(data[0]))
    hdr_cells = table.rows[0].cells
    for i, key in enumerate(data[0].keys()):
        hdr_cells[i].text = key
    for row in data:
        cells = table.add_row().cells
        for i, key in enumerate(row):
            cells[i].text = str(row[key])
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer
